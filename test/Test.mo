import Debug "mo:base/Debug";
import Nat "mo:base/Nat";
import Text "mo:base/Text";
import Bool "mo:base/Bool";
import List "mo:base/List";
import Principal "mo:base/Principal";
import Base64 "../src/code/Base64";
import CollectUtils "../src/utils/CollectionUtils";
import TextUtils "../src/utils/TextUtils";
import PrincipalUtils "../src/utils/PrincipalUtils";
import Assert "../src/utils/Assert";
import SafeUint "../src/math/SafeUint";
import SafeInt "../src/math/SafeInt";
import SafeUintUtils "../src/math/SafeUint/UintUtils";
import SafeIntUtils "../src/math/SafeInt/IntUtils";
import EvictingQueue "../src/collections/EvictingQueue";
import SortedStack "../src/collections/SortedStack";

actor Test {

    type Obj = {
        f1: Text;
        f2: Nat;
    };

    private var stack: SortedStack.SortedStack<Text> = SortedStack.SortedStack(Text.equal, Text.compare);
    private var evictingQueue: EvictingQueue.EvictingQueue<Text> = EvictingQueue.EvictingQueue<Text>(5, Text.equal);
    public func testEvicingQueueAdd(t: Text): async Bool {
        return evictingQueue.add(t);
    };
    public query func testEvicingQueueContains(t: Text): async Bool {
        return evictingQueue.contains(t);
    };
    public func testEvicingQueueRemove(): async () {
        evictingQueue.remove();
    };
    public func testEvicingQueuePoll(): async ?Text {
        return evictingQueue.poll();
    };
    public query func testEvicingQueueSize(): async Nat {
        return evictingQueue.size();
    };
    public query func testEvicingQueueArray(): async [Text] {
        return evictingQueue.toArray();
    };
    public func testEvicingQueuePeek(): async ?Text {
        return evictingQueue.peek();
    };
    public func testStackAdd(t: Text): async () {
        stack.add(t);
    };
    public func testStackPoll(): async ?Text {
        return stack.poll();
    };
    public func testStackPeek(): async ?Text {
        return stack.peek();
    };
    public func testStackRemove(): async () {
        stack.remove();
    };
    public query func testStackArray(): async [Text] {
        return stack.toArray();
    };
    public query func testStackSize(): async Nat {
        return stack.size();
    };
    public query func testStackContains(t: Text): async Bool {
        return stack.contains(t);
    };
    public func testBase64(): async () {
        assert(Base64.encode("Test Base64 encode!") == "VGVzdCBCYXNlNjQgZW5jb2RlIQ==");
        assert(Base64.encode("Test Base64 encode1!") == "VGVzdCBCYXNlNjQgZW5jb2RlMSE=");
    };
    public func testCollectUtils(): async () {
        var arr1: [Text] = ["a", "b", "c", "d", "e"];
        var arr2: [Obj] = [{f1 = "a"; f2 = 0;}, {f1 = "b"; f2 = 1;}, {f1 = "c"; f2 = 2;}, {f1 = "d"; f2 = 3;}, {f1 = "e"; f2 = 4;}];
        var obj1: Obj = {f1 = "a"; f2 = 0;};
        var obj2: Obj = {f1 = "a"; f2 = 1;};
        var list1: List.List<Text> = List.fromArray<Text>(arr1);
        var list2: List.List<Obj> = List.fromArray<Obj>(arr2);
        func objEqual(a: Obj, b: Obj): Bool {
            return ((a.f1 == b.f1) and (a.f2 == b.f2))
        };

        assert(CollectUtils.arrayContains<Text>(arr1, "a", Text.equal));
        assert(not CollectUtils.arrayContains<Text>(arr1, "f", Text.equal));
        assert(CollectUtils.arrayContains<Obj>(arr2, obj1, objEqual));
        assert(not CollectUtils.arrayContains<Obj>(arr2, obj2, objEqual));

        assert(CollectUtils.listContains<Text>(list1, "a", Text.equal));
        assert(not CollectUtils.listContains<Text>(list1, "f", Text.equal));
        assert(CollectUtils.listContains<Obj>(list2, obj1, objEqual));
        assert(not CollectUtils.listContains<Obj>(list2, obj2, objEqual));


        assert(CollectUtils.arrayRemove<Text>(arr1, "a", Text.equal).size() == (arr1.size() - 1: Nat));
        assert(not CollectUtils.arrayContains<Text>(CollectUtils.arrayRemove<Text>(arr1, "a", Text.equal), "a", Text.equal));

        assert(List.size<Text>(CollectUtils.listRemove<Text>(list1, "a", Text.equal)) == (List.size<Text>(list1) - 1: Nat));  
        assert(List.size<Text>(CollectUtils.listRemove<Text>(list1, "f", Text.equal)) == List.size<Text>(list1));  
        assert(List.size<Obj>(CollectUtils.listRemove<Obj>(list2, obj1, objEqual)) == (List.size<Obj>(list2) - 1: Nat));
        assert(List.size<Obj>(CollectUtils.listRemove<Obj>(list2, obj2, objEqual)) == List.size<Obj>(list2) );

        assert(CollectUtils.arrayRange<Text>(arr1, 1, 1).size() == 1);
        assert(CollectUtils.arrayRange<Text>(arr1, 1, 2).size() == 2);
        assert(CollectUtils.arrayRange<Text>(arr1, 1, 5).size() == 4);
        assert(not CollectUtils.arrayContains<Text>(CollectUtils.arrayRange<Text>(arr1, 1, 1), "a", Text.equal));
        assert(CollectUtils.arrayContains<Text>(CollectUtils.arrayRange<Text>(arr1, 1, 1), "b", Text.equal));
        assert(not CollectUtils.arrayContains<Text>(CollectUtils.arrayRange<Text>(arr1, 1, 1), "c", Text.equal));
        
        assert(CollectUtils.arrayRange<Obj>(arr2, 1, 1).size() == 1);
        assert(CollectUtils.arrayRange<Obj>(arr2, 1, 2).size() == 2);
        assert(CollectUtils.arrayContains<Obj>(CollectUtils.arrayRange<Obj>(arr2, 0, 1), obj1, objEqual));
        assert(not CollectUtils.arrayContains<Obj>(CollectUtils.arrayRange<Obj>(arr2, 1, 1), obj1, objEqual));

        assert(List.size<Text>(CollectUtils.listRange<Text>(list1, 1, 1)) == 1);
        assert(List.size<Text>(CollectUtils.listRange<Text>(list1, 1, 2)) == 2);
        assert(not CollectUtils.listContains<Text>(CollectUtils.listRange<Text>(list1, 1, 1), "a", Text.equal));
        assert(CollectUtils.listContains<Text>(CollectUtils.listRange<Text>(list1, 1, 1), "b", Text.equal));
        assert(not CollectUtils.listContains<Text>(CollectUtils.listRange<Text>(list1, 1, 1), "c", Text.equal));

        assert(List.size<Obj>(CollectUtils.listRange<Obj>(list2, 1, 1)) == 1);
        assert(List.size<Obj>(CollectUtils.listRange<Obj>(list2, 1, 2)) == 2);
        assert(CollectUtils.listContains<Obj>(CollectUtils.listRange<Obj>(list2, 0, 1), obj1, objEqual));
        assert(not CollectUtils.listContains<Obj>(CollectUtils.listRange<Obj>(list2, 1, 1), obj1, objEqual));

    };
    public func testTextUtils(): async () {
        assert(TextUtils.hexToNumber("0") == 0);
        assert(TextUtils.hexToNumber("1") == 1);
        assert(TextUtils.hexToNumber("2") == 2);
        assert(TextUtils.hexToNumber("3") == 3);
        assert(TextUtils.hexToNumber("4") == 4);
        assert(TextUtils.hexToNumber("5") == 5);
        assert(TextUtils.hexToNumber("6") == 6);
        assert(TextUtils.hexToNumber("7") == 7);
        assert(TextUtils.hexToNumber("8") == 8);
        assert(TextUtils.hexToNumber("9") == 9);
        assert(TextUtils.hexToNumber("a") == 10);
        assert(TextUtils.hexToNumber("b") == 11);
        assert(TextUtils.hexToNumber("c") == 12);
        assert(TextUtils.hexToNumber("d") == 13);
        assert(TextUtils.hexToNumber("e") == 14);
        assert(TextUtils.hexToNumber("f") == 15);
    };

    // === test case ===
    public query func testSafeUint8Add(a: Nat, b: Nat): async Nat { SafeUint.Uint8(a).add(SafeUint.Uint8(b)).val() };
    public query func testSafeUint8Sub(a: Nat, b: Nat): async Nat { SafeUint.Uint8(a).sub(SafeUint.Uint8(b)).val() };
    public query func testSafeUint8Mul(a: Nat, b: Nat): async Nat { SafeUint.Uint8(a).mul(SafeUint.Uint8(b)).val() };
    public query func testSafeUint8Div(a: Nat, b: Nat): async Nat { SafeUint.Uint8(a).div(SafeUint.Uint8(b)).val() };
    public query func testSafeUint8Rem(a: Nat, b: Nat): async Nat { SafeUint.Uint8(a).rem(SafeUint.Uint8(b)).val() };
    public query func testSafeUint8Pow(a: Nat, b: Nat): async Nat { SafeUint.Uint8(a).pow(b).val() };
    public query func testSafeUint8Left(a: Nat, b: Nat): async Nat { SafeUint.Uint8(a).bitshiftLeft(b).val() };
    public query func testSafeUint8Right(a: Nat, b: Nat): async Nat { SafeUint.Uint8(a).bitshiftRight(b).val() };
    public query func testSafeUint8And(a: Nat, b: Nat): async Nat { SafeUint.Uint8(a).bitand(SafeUint.Uint8(b)).val() };
    public query func testSafeUint8Or(a: Nat, b: Nat): async Nat { SafeUint.Uint8(a).bitor(SafeUint.Uint8(b)).val() };
    public query func testSafeUint8Xor(a: Nat, b: Nat): async Nat { SafeUint.Uint8(a).bitxor(SafeUint.Uint8(b)).val() };
    public query func testSafeUint8Not(a: Nat): async Nat { SafeUint.Uint8(a).bitnot().val() };
    public query func testSafeUint8Neg(a: Nat): async Nat { SafeUint.Uint8(a).neg().val() };
    public query func testSafeInt8Add(a: Int, b: Int): async Int { SafeInt.Int8(a).add(SafeInt.Int8(b)).val() };
    public query func testSafeInt8Sub(a: Int, b: Int): async Int { SafeInt.Int8(a).sub(SafeInt.Int8(b)).val() };
    public query func testSafeInt8Mul(a: Int, b: Int): async Int { SafeInt.Int8(a).mul(SafeInt.Int8(b)).val() };
    public query func testSafeInt8Div(a: Int, b: Int): async Int { SafeInt.Int8(a).div(SafeInt.Int8(b)).val() };
    public query func testSafeInt8Rem(a: Int, b: Int): async Int { SafeInt.Int8(a).rem(SafeInt.Int8(b)).val() };
    public query func testSafeInt8Pow(a: Int, b: Int): async Int { SafeInt.Int8(a).pow(b).val() };
    public query func testSafeInt8Left(a: Int, b: Nat): async Int { SafeInt.Int8(a).bitshiftLeft(b).val() };
    public query func testSafeInt8Right(a: Int, b: Nat): async Int { SafeInt.Int8(a).bitshiftRight(b).val() };
    public query func testSafeInt8And(a: Int, b: Int): async Int { SafeInt.Int8(a).bitand(SafeInt.Int8(b)).val() };
    public query func testSafeInt8Or(a: Int, b: Int): async Int { SafeInt.Int8(a).bitor(SafeInt.Int8(b)).val() };
    public query func testSafeInt8Xor(a: Int, b: Int): async Int { SafeInt.Int8(a).bitxor(SafeInt.Int8(b)).val() };
    public query func testSafeInt8Not(a: Int): async Int { SafeInt.Int8(a).bitnot().val() };
    public query func testSafeInt8Neg(a: Int): async Int { SafeInt.Int8(a).neg().val() };
    public query func testSafeUint16Add(a: Nat, b: Nat): async Nat { SafeUint.Uint16(a).add(SafeUint.Uint16(b)).val() };
    public query func testSafeUint16Sub(a: Nat, b: Nat): async Nat { SafeUint.Uint16(a).sub(SafeUint.Uint16(b)).val() };
    public query func testSafeUint16Mul(a: Nat, b: Nat): async Nat { SafeUint.Uint16(a).mul(SafeUint.Uint16(b)).val() };
    public query func testSafeUint16Div(a: Nat, b: Nat): async Nat { SafeUint.Uint16(a).div(SafeUint.Uint16(b)).val() };
    public query func testSafeUint16Rem(a: Nat, b: Nat): async Nat { SafeUint.Uint16(a).rem(SafeUint.Uint16(b)).val() };
    public query func testSafeUint16Pow(a: Nat, b: Nat): async Nat { SafeUint.Uint16(a).pow(b).val() };
    public query func testSafeUint16Left(a: Nat, b: Nat): async Nat { SafeUint.Uint16(a).bitshiftLeft(b).val() };
    public query func testSafeUint16Right(a: Nat, b: Nat): async Nat { SafeUint.Uint16(a).bitshiftRight(b).val() };
    public query func testSafeUint16And(a: Nat, b: Nat): async Nat { SafeUint.Uint16(a).bitand(SafeUint.Uint16(b)).val() };
    public query func testSafeUint16Or(a: Nat, b: Nat): async Nat { SafeUint.Uint16(a).bitor(SafeUint.Uint16(b)).val() };
    public query func testSafeUint16Xor(a: Nat, b: Nat): async Nat { SafeUint.Uint16(a).bitxor(SafeUint.Uint16(b)).val() };
    public query func testSafeUint16Not(a: Nat): async Nat { SafeUint.Uint16(a).bitnot().val() };
    public query func testSafeUint16Neg(a: Nat): async Nat { SafeUint.Uint16(a).neg().val() };
    public query func testSafeInt16Add(a: Int, b: Int): async Int { SafeInt.Int16(a).add(SafeInt.Int16(b)).val() };
    public query func testSafeInt16Sub(a: Int, b: Int): async Int { SafeInt.Int16(a).sub(SafeInt.Int16(b)).val() };
    public query func testSafeInt16Mul(a: Int, b: Int): async Int { SafeInt.Int16(a).mul(SafeInt.Int16(b)).val() };
    public query func testSafeInt16Div(a: Int, b: Int): async Int { SafeInt.Int16(a).div(SafeInt.Int16(b)).val() };
    public query func testSafeInt16Rem(a: Int, b: Int): async Int { SafeInt.Int16(a).rem(SafeInt.Int16(b)).val() };
    public query func testSafeInt16Pow(a: Int, b: Int): async Int { SafeInt.Int16(a).pow(b).val() };
    public query func testSafeInt16Left(a: Int, b: Nat): async Int { SafeInt.Int16(a).bitshiftLeft(b).val() };
    public query func testSafeInt16Right(a: Int, b: Nat): async Int { SafeInt.Int16(a).bitshiftRight(b).val() };
    public query func testSafeInt16And(a: Int, b: Int): async Int { SafeInt.Int16(a).bitand(SafeInt.Int16(b)).val() };
    public query func testSafeInt16Or(a: Int, b: Int): async Int { SafeInt.Int16(a).bitor(SafeInt.Int16(b)).val() };
    public query func testSafeInt16Xor(a: Int, b: Int): async Int { SafeInt.Int16(a).bitxor(SafeInt.Int16(b)).val() };
    public query func testSafeInt16Not(a: Int): async Int { SafeInt.Int16(a).bitnot().val() };
    public query func testSafeInt16Neg(a: Int): async Int { SafeInt.Int16(a).neg().val() };
    public query func testSafeUint24Add(a: Nat, b: Nat): async Nat { SafeUint.Uint24(a).add(SafeUint.Uint24(b)).val() };
    public query func testSafeUint24Sub(a: Nat, b: Nat): async Nat { SafeUint.Uint24(a).sub(SafeUint.Uint24(b)).val() };
    public query func testSafeUint24Mul(a: Nat, b: Nat): async Nat { SafeUint.Uint24(a).mul(SafeUint.Uint24(b)).val() };
    public query func testSafeUint24Div(a: Nat, b: Nat): async Nat { SafeUint.Uint24(a).div(SafeUint.Uint24(b)).val() };
    public query func testSafeUint24Rem(a: Nat, b: Nat): async Nat { SafeUint.Uint24(a).rem(SafeUint.Uint24(b)).val() };
    public query func testSafeUint24Pow(a: Nat, b: Nat): async Nat { SafeUint.Uint24(a).pow(b).val() };
    public query func testSafeUint24Left(a: Nat, b: Nat): async Nat { SafeUint.Uint24(a).bitshiftLeft(b).val() };
    public query func testSafeUint24Right(a: Nat, b: Nat): async Nat { SafeUint.Uint24(a).bitshiftRight(b).val() };
    public query func testSafeUint24And(a: Nat, b: Nat): async Nat { SafeUint.Uint24(a).bitand(SafeUint.Uint24(b)).val() };
    public query func testSafeUint24Or(a: Nat, b: Nat): async Nat { SafeUint.Uint24(a).bitor(SafeUint.Uint24(b)).val() };
    public query func testSafeUint24Xor(a: Nat, b: Nat): async Nat { SafeUint.Uint24(a).bitxor(SafeUint.Uint24(b)).val() };
    public query func testSafeUint24Not(a: Nat): async Nat { SafeUint.Uint24(a).bitnot().val() };
    public query func testSafeUint24Neg(a: Nat): async Nat { SafeUint.Uint24(a).neg().val() };
    public query func testSafeInt24Add(a: Int, b: Int): async Int { SafeInt.Int24(a).add(SafeInt.Int24(b)).val() };
    public query func testSafeInt24Sub(a: Int, b: Int): async Int { SafeInt.Int24(a).sub(SafeInt.Int24(b)).val() };
    public query func testSafeInt24Mul(a: Int, b: Int): async Int { SafeInt.Int24(a).mul(SafeInt.Int24(b)).val() };
    public query func testSafeInt24Div(a: Int, b: Int): async Int { SafeInt.Int24(a).div(SafeInt.Int24(b)).val() };
    public query func testSafeInt24Rem(a: Int, b: Int): async Int { SafeInt.Int24(a).rem(SafeInt.Int24(b)).val() };
    public query func testSafeInt24Pow(a: Int, b: Int): async Int { SafeInt.Int24(a).pow(b).val() };
    public query func testSafeInt24Left(a: Int, b: Nat): async Int { SafeInt.Int24(a).bitshiftLeft(b).val() };
    public query func testSafeInt24Right(a: Int, b: Nat): async Int { SafeInt.Int24(a).bitshiftRight(b).val() };
    public query func testSafeInt24And(a: Int, b: Int): async Int { SafeInt.Int24(a).bitand(SafeInt.Int24(b)).val() };
    public query func testSafeInt24Or(a: Int, b: Int): async Int { SafeInt.Int24(a).bitor(SafeInt.Int24(b)).val() };
    public query func testSafeInt24Xor(a: Int, b: Int): async Int { SafeInt.Int24(a).bitxor(SafeInt.Int24(b)).val() };
    public query func testSafeInt24Not(a: Int): async Int { SafeInt.Int24(a).bitnot().val() };
    public query func testSafeInt24Neg(a: Int): async Int { SafeInt.Int24(a).neg().val() };
    public query func testSafeUint32Add(a: Nat, b: Nat): async Nat { SafeUint.Uint32(a).add(SafeUint.Uint32(b)).val() };
    public query func testSafeUint32Sub(a: Nat, b: Nat): async Nat { SafeUint.Uint32(a).sub(SafeUint.Uint32(b)).val() };
    public query func testSafeUint32Mul(a: Nat, b: Nat): async Nat { SafeUint.Uint32(a).mul(SafeUint.Uint32(b)).val() };
    public query func testSafeUint32Div(a: Nat, b: Nat): async Nat { SafeUint.Uint32(a).div(SafeUint.Uint32(b)).val() };
    public query func testSafeUint32Rem(a: Nat, b: Nat): async Nat { SafeUint.Uint32(a).rem(SafeUint.Uint32(b)).val() };
    public query func testSafeUint32Pow(a: Nat, b: Nat): async Nat { SafeUint.Uint32(a).pow(b).val() };
    public query func testSafeUint32Left(a: Nat, b: Nat): async Nat { SafeUint.Uint32(a).bitshiftLeft(b).val() };
    public query func testSafeUint32Right(a: Nat, b: Nat): async Nat { SafeUint.Uint32(a).bitshiftRight(b).val() };
    public query func testSafeUint32And(a: Nat, b: Nat): async Nat { SafeUint.Uint32(a).bitand(SafeUint.Uint32(b)).val() };
    public query func testSafeUint32Or(a: Nat, b: Nat): async Nat { SafeUint.Uint32(a).bitor(SafeUint.Uint32(b)).val() };
    public query func testSafeUint32Xor(a: Nat, b: Nat): async Nat { SafeUint.Uint32(a).bitxor(SafeUint.Uint32(b)).val() };
    public query func testSafeUint32Not(a: Nat): async Nat { SafeUint.Uint32(a).bitnot().val() };
    public query func testSafeUint32Neg(a: Nat): async Nat { SafeUint.Uint32(a).neg().val() };
    public query func testSafeInt32Add(a: Int, b: Int): async Int { SafeInt.Int32(a).add(SafeInt.Int32(b)).val() };
    public query func testSafeInt32Sub(a: Int, b: Int): async Int { SafeInt.Int32(a).sub(SafeInt.Int32(b)).val() };
    public query func testSafeInt32Mul(a: Int, b: Int): async Int { SafeInt.Int32(a).mul(SafeInt.Int32(b)).val() };
    public query func testSafeInt32Div(a: Int, b: Int): async Int { SafeInt.Int32(a).div(SafeInt.Int32(b)).val() };
    public query func testSafeInt32Rem(a: Int, b: Int): async Int { SafeInt.Int32(a).rem(SafeInt.Int32(b)).val() };
    public query func testSafeInt32Pow(a: Int, b: Int): async Int { SafeInt.Int32(a).pow(b).val() };
    public query func testSafeInt32Left(a: Int, b: Nat): async Int { SafeInt.Int32(a).bitshiftLeft(b).val() };
    public query func testSafeInt32Right(a: Int, b: Nat): async Int { SafeInt.Int32(a).bitshiftRight(b).val() };
    public query func testSafeInt32And(a: Int, b: Int): async Int { SafeInt.Int32(a).bitand(SafeInt.Int32(b)).val() };
    public query func testSafeInt32Or(a: Int, b: Int): async Int { SafeInt.Int32(a).bitor(SafeInt.Int32(b)).val() };
    public query func testSafeInt32Xor(a: Int, b: Int): async Int { SafeInt.Int32(a).bitxor(SafeInt.Int32(b)).val() };
    public query func testSafeInt32Not(a: Int): async Int { SafeInt.Int32(a).bitnot().val() };
    public query func testSafeInt32Neg(a: Int): async Int { SafeInt.Int32(a).neg().val() };
    public query func testSafeUint48Add(a: Nat, b: Nat): async Nat { SafeUint.Uint48(a).add(SafeUint.Uint48(b)).val() };
    public query func testSafeUint48Sub(a: Nat, b: Nat): async Nat { SafeUint.Uint48(a).sub(SafeUint.Uint48(b)).val() };
    public query func testSafeUint48Mul(a: Nat, b: Nat): async Nat { SafeUint.Uint48(a).mul(SafeUint.Uint48(b)).val() };
    public query func testSafeUint48Div(a: Nat, b: Nat): async Nat { SafeUint.Uint48(a).div(SafeUint.Uint48(b)).val() };
    public query func testSafeUint48Rem(a: Nat, b: Nat): async Nat { SafeUint.Uint48(a).rem(SafeUint.Uint48(b)).val() };
    public query func testSafeUint48Pow(a: Nat, b: Nat): async Nat { SafeUint.Uint48(a).pow(b).val() };
    public query func testSafeUint48Left(a: Nat, b: Nat): async Nat { SafeUint.Uint48(a).bitshiftLeft(b).val() };
    public query func testSafeUint48Right(a: Nat, b: Nat): async Nat { SafeUint.Uint48(a).bitshiftRight(b).val() };
    public query func testSafeUint48And(a: Nat, b: Nat): async Nat { SafeUint.Uint48(a).bitand(SafeUint.Uint48(b)).val() };
    public query func testSafeUint48Or(a: Nat, b: Nat): async Nat { SafeUint.Uint48(a).bitor(SafeUint.Uint48(b)).val() };
    public query func testSafeUint48Xor(a: Nat, b: Nat): async Nat { SafeUint.Uint48(a).bitxor(SafeUint.Uint48(b)).val() };
    public query func testSafeUint48Not(a: Nat): async Nat { SafeUint.Uint48(a).bitnot().val() };
    public query func testSafeUint48Neg(a: Nat): async Nat { SafeUint.Uint48(a).neg().val() };
    public query func testSafeInt48Add(a: Int, b: Int): async Int { SafeInt.Int48(a).add(SafeInt.Int48(b)).val() };
    public query func testSafeInt48Sub(a: Int, b: Int): async Int { SafeInt.Int48(a).sub(SafeInt.Int48(b)).val() };
    public query func testSafeInt48Mul(a: Int, b: Int): async Int { SafeInt.Int48(a).mul(SafeInt.Int48(b)).val() };
    public query func testSafeInt48Div(a: Int, b: Int): async Int { SafeInt.Int48(a).div(SafeInt.Int48(b)).val() };
    public query func testSafeInt48Rem(a: Int, b: Int): async Int { SafeInt.Int48(a).rem(SafeInt.Int48(b)).val() };
    public query func testSafeInt48Pow(a: Int, b: Int): async Int { SafeInt.Int48(a).pow(b).val() };
    public query func testSafeInt48Left(a: Int, b: Nat): async Int { SafeInt.Int48(a).bitshiftLeft(b).val() };
    public query func testSafeInt48Right(a: Int, b: Nat): async Int { SafeInt.Int48(a).bitshiftRight(b).val() };
    public query func testSafeInt48And(a: Int, b: Int): async Int { SafeInt.Int48(a).bitand(SafeInt.Int48(b)).val() };
    public query func testSafeInt48Or(a: Int, b: Int): async Int { SafeInt.Int48(a).bitor(SafeInt.Int48(b)).val() };
    public query func testSafeInt48Xor(a: Int, b: Int): async Int { SafeInt.Int48(a).bitxor(SafeInt.Int48(b)).val() };
    public query func testSafeInt48Not(a: Int): async Int { SafeInt.Int48(a).bitnot().val() };
    public query func testSafeInt48Neg(a: Int): async Int { SafeInt.Int48(a).neg().val() };
    public query func testSafeUint56Add(a: Nat, b: Nat): async Nat { SafeUint.Uint56(a).add(SafeUint.Uint56(b)).val() };
    public query func testSafeUint56Sub(a: Nat, b: Nat): async Nat { SafeUint.Uint56(a).sub(SafeUint.Uint56(b)).val() };
    public query func testSafeUint56Mul(a: Nat, b: Nat): async Nat { SafeUint.Uint56(a).mul(SafeUint.Uint56(b)).val() };
    public query func testSafeUint56Div(a: Nat, b: Nat): async Nat { SafeUint.Uint56(a).div(SafeUint.Uint56(b)).val() };
    public query func testSafeUint56Rem(a: Nat, b: Nat): async Nat { SafeUint.Uint56(a).rem(SafeUint.Uint56(b)).val() };
    public query func testSafeUint56Pow(a: Nat, b: Nat): async Nat { SafeUint.Uint56(a).pow(b).val() };
    public query func testSafeUint56Left(a: Nat, b: Nat): async Nat { SafeUint.Uint56(a).bitshiftLeft(b).val() };
    public query func testSafeUint56Right(a: Nat, b: Nat): async Nat { SafeUint.Uint56(a).bitshiftRight(b).val() };
    public query func testSafeUint56And(a: Nat, b: Nat): async Nat { SafeUint.Uint56(a).bitand(SafeUint.Uint56(b)).val() };
    public query func testSafeUint56Or(a: Nat, b: Nat): async Nat { SafeUint.Uint56(a).bitor(SafeUint.Uint56(b)).val() };
    public query func testSafeUint56Xor(a: Nat, b: Nat): async Nat { SafeUint.Uint56(a).bitxor(SafeUint.Uint56(b)).val() };
    public query func testSafeUint56Not(a: Nat): async Nat { SafeUint.Uint56(a).bitnot().val() };
    public query func testSafeUint56Neg(a: Nat): async Nat { SafeUint.Uint56(a).neg().val() };
    public query func testSafeInt56Add(a: Int, b: Int): async Int { SafeInt.Int56(a).add(SafeInt.Int56(b)).val() };
    public query func testSafeInt56Sub(a: Int, b: Int): async Int { SafeInt.Int56(a).sub(SafeInt.Int56(b)).val() };
    public query func testSafeInt56Mul(a: Int, b: Int): async Int { SafeInt.Int56(a).mul(SafeInt.Int56(b)).val() };
    public query func testSafeInt56Div(a: Int, b: Int): async Int { SafeInt.Int56(a).div(SafeInt.Int56(b)).val() };
    public query func testSafeInt56Rem(a: Int, b: Int): async Int { SafeInt.Int56(a).rem(SafeInt.Int56(b)).val() };
    public query func testSafeInt56Pow(a: Int, b: Int): async Int { SafeInt.Int56(a).pow(b).val() };
    public query func testSafeInt56Left(a: Int, b: Nat): async Int { SafeInt.Int56(a).bitshiftLeft(b).val() };
    public query func testSafeInt56Right(a: Int, b: Nat): async Int { SafeInt.Int56(a).bitshiftRight(b).val() };
    public query func testSafeInt56And(a: Int, b: Int): async Int { SafeInt.Int56(a).bitand(SafeInt.Int56(b)).val() };
    public query func testSafeInt56Or(a: Int, b: Int): async Int { SafeInt.Int56(a).bitor(SafeInt.Int56(b)).val() };
    public query func testSafeInt56Xor(a: Int, b: Int): async Int { SafeInt.Int56(a).bitxor(SafeInt.Int56(b)).val() };
    public query func testSafeInt56Not(a: Int): async Int { SafeInt.Int56(a).bitnot().val() };
    public query func testSafeInt56Neg(a: Int): async Int { SafeInt.Int56(a).neg().val() };
    public query func testSafeUint64Add(a: Nat, b: Nat): async Nat { SafeUint.Uint64(a).add(SafeUint.Uint64(b)).val() };
    public query func testSafeUint64Sub(a: Nat, b: Nat): async Nat { SafeUint.Uint64(a).sub(SafeUint.Uint64(b)).val() };
    public query func testSafeUint64Mul(a: Nat, b: Nat): async Nat { SafeUint.Uint64(a).mul(SafeUint.Uint64(b)).val() };
    public query func testSafeUint64Div(a: Nat, b: Nat): async Nat { SafeUint.Uint64(a).div(SafeUint.Uint64(b)).val() };
    public query func testSafeUint64Rem(a: Nat, b: Nat): async Nat { SafeUint.Uint64(a).rem(SafeUint.Uint64(b)).val() };
    public query func testSafeUint64Pow(a: Nat, b: Nat): async Nat { SafeUint.Uint64(a).pow(b).val() };
    public query func testSafeUint64Left(a: Nat, b: Nat): async Nat { SafeUint.Uint64(a).bitshiftLeft(b).val() };
    public query func testSafeUint64Right(a: Nat, b: Nat): async Nat { SafeUint.Uint64(a).bitshiftRight(b).val() };
    public query func testSafeUint64And(a: Nat, b: Nat): async Nat { SafeUint.Uint64(a).bitand(SafeUint.Uint64(b)).val() };
    public query func testSafeUint64Or(a: Nat, b: Nat): async Nat { SafeUint.Uint64(a).bitor(SafeUint.Uint64(b)).val() };
    public query func testSafeUint64Xor(a: Nat, b: Nat): async Nat { SafeUint.Uint64(a).bitxor(SafeUint.Uint64(b)).val() };
    public query func testSafeUint64Not(a: Nat): async Nat { SafeUint.Uint64(a).bitnot().val() };
    public query func testSafeUint64Neg(a: Nat): async Nat { SafeUint.Uint64(a).neg().val() };
    public query func testSafeInt64Add(a: Int, b: Int): async Int { SafeInt.Int64(a).add(SafeInt.Int64(b)).val() };
    public query func testSafeInt64Sub(a: Int, b: Int): async Int { SafeInt.Int64(a).sub(SafeInt.Int64(b)).val() };
    public query func testSafeInt64Mul(a: Int, b: Int): async Int { SafeInt.Int64(a).mul(SafeInt.Int64(b)).val() };
    public query func testSafeInt64Div(a: Int, b: Int): async Int { SafeInt.Int64(a).div(SafeInt.Int64(b)).val() };
    public query func testSafeInt64Rem(a: Int, b: Int): async Int { SafeInt.Int64(a).rem(SafeInt.Int64(b)).val() };
    public query func testSafeInt64Pow(a: Int, b: Int): async Int { SafeInt.Int64(a).pow(b).val() };
    public query func testSafeInt64Left(a: Int, b: Nat): async Int { SafeInt.Int64(a).bitshiftLeft(b).val() };
    public query func testSafeInt64Right(a: Int, b: Nat): async Int { SafeInt.Int64(a).bitshiftRight(b).val() };
    public query func testSafeInt64And(a: Int, b: Int): async Int { SafeInt.Int64(a).bitand(SafeInt.Int64(b)).val() };
    public query func testSafeInt64Or(a: Int, b: Int): async Int { SafeInt.Int64(a).bitor(SafeInt.Int64(b)).val() };
    public query func testSafeInt64Xor(a: Int, b: Int): async Int { SafeInt.Int64(a).bitxor(SafeInt.Int64(b)).val() };
    public query func testSafeInt64Not(a: Int): async Int { SafeInt.Int64(a).bitnot().val() };
    public query func testSafeInt64Neg(a: Int): async Int { SafeInt.Int64(a).neg().val() };
    public query func testSafeUint80Add(a: Nat, b: Nat): async Nat { SafeUint.Uint80(a).add(SafeUint.Uint80(b)).val() };
    public query func testSafeUint80Sub(a: Nat, b: Nat): async Nat { SafeUint.Uint80(a).sub(SafeUint.Uint80(b)).val() };
    public query func testSafeUint80Mul(a: Nat, b: Nat): async Nat { SafeUint.Uint80(a).mul(SafeUint.Uint80(b)).val() };
    public query func testSafeUint80Div(a: Nat, b: Nat): async Nat { SafeUint.Uint80(a).div(SafeUint.Uint80(b)).val() };
    public query func testSafeUint80Rem(a: Nat, b: Nat): async Nat { SafeUint.Uint80(a).rem(SafeUint.Uint80(b)).val() };
    public query func testSafeUint80Pow(a: Nat, b: Nat): async Nat { SafeUint.Uint80(a).pow(b).val() };
    public query func testSafeUint80Left(a: Nat, b: Nat): async Nat { SafeUint.Uint80(a).bitshiftLeft(b).val() };
    public query func testSafeUint80Right(a: Nat, b: Nat): async Nat { SafeUint.Uint80(a).bitshiftRight(b).val() };
    public query func testSafeUint80And(a: Nat, b: Nat): async Nat { SafeUint.Uint80(a).bitand(SafeUint.Uint80(b)).val() };
    public query func testSafeUint80Or(a: Nat, b: Nat): async Nat { SafeUint.Uint80(a).bitor(SafeUint.Uint80(b)).val() };
    public query func testSafeUint80Xor(a: Nat, b: Nat): async Nat { SafeUint.Uint80(a).bitxor(SafeUint.Uint80(b)).val() };
    public query func testSafeUint80Not(a: Nat): async Nat { SafeUint.Uint80(a).bitnot().val() };
    public query func testSafeUint80Neg(a: Nat): async Nat { SafeUint.Uint80(a).neg().val() };
    public query func testSafeInt80Add(a: Int, b: Int): async Int { SafeInt.Int80(a).add(SafeInt.Int80(b)).val() };
    public query func testSafeInt80Sub(a: Int, b: Int): async Int { SafeInt.Int80(a).sub(SafeInt.Int80(b)).val() };
    public query func testSafeInt80Mul(a: Int, b: Int): async Int { SafeInt.Int80(a).mul(SafeInt.Int80(b)).val() };
    public query func testSafeInt80Div(a: Int, b: Int): async Int { SafeInt.Int80(a).div(SafeInt.Int80(b)).val() };
    public query func testSafeInt80Rem(a: Int, b: Int): async Int { SafeInt.Int80(a).rem(SafeInt.Int80(b)).val() };
    public query func testSafeInt80Pow(a: Int, b: Int): async Int { SafeInt.Int80(a).pow(b).val() };
    public query func testSafeInt80Left(a: Int, b: Nat): async Int { SafeInt.Int80(a).bitshiftLeft(b).val() };
    public query func testSafeInt80Right(a: Int, b: Nat): async Int { SafeInt.Int80(a).bitshiftRight(b).val() };
    public query func testSafeInt80And(a: Int, b: Int): async Int { SafeInt.Int80(a).bitand(SafeInt.Int80(b)).val() };
    public query func testSafeInt80Or(a: Int, b: Int): async Int { SafeInt.Int80(a).bitor(SafeInt.Int80(b)).val() };
    public query func testSafeInt80Xor(a: Int, b: Int): async Int { SafeInt.Int80(a).bitxor(SafeInt.Int80(b)).val() };
    public query func testSafeInt80Not(a: Int): async Int { SafeInt.Int80(a).bitnot().val() };
    public query func testSafeInt80Neg(a: Int): async Int { SafeInt.Int80(a).neg().val() };
    public query func testSafeUint96Add(a: Nat, b: Nat): async Nat { SafeUint.Uint96(a).add(SafeUint.Uint96(b)).val() };
    public query func testSafeUint96Sub(a: Nat, b: Nat): async Nat { SafeUint.Uint96(a).sub(SafeUint.Uint96(b)).val() };
    public query func testSafeUint96Mul(a: Nat, b: Nat): async Nat { SafeUint.Uint96(a).mul(SafeUint.Uint96(b)).val() };
    public query func testSafeUint96Div(a: Nat, b: Nat): async Nat { SafeUint.Uint96(a).div(SafeUint.Uint96(b)).val() };
    public query func testSafeUint96Rem(a: Nat, b: Nat): async Nat { SafeUint.Uint96(a).rem(SafeUint.Uint96(b)).val() };
    public query func testSafeUint96Pow(a: Nat, b: Nat): async Nat { SafeUint.Uint96(a).pow(b).val() };
    public query func testSafeUint96Left(a: Nat, b: Nat): async Nat { SafeUint.Uint96(a).bitshiftLeft(b).val() };
    public query func testSafeUint96Right(a: Nat, b: Nat): async Nat { SafeUint.Uint96(a).bitshiftRight(b).val() };
    public query func testSafeUint96And(a: Nat, b: Nat): async Nat { SafeUint.Uint96(a).bitand(SafeUint.Uint96(b)).val() };
    public query func testSafeUint96Or(a: Nat, b: Nat): async Nat { SafeUint.Uint96(a).bitor(SafeUint.Uint96(b)).val() };
    public query func testSafeUint96Xor(a: Nat, b: Nat): async Nat { SafeUint.Uint96(a).bitxor(SafeUint.Uint96(b)).val() };
    public query func testSafeUint96Not(a: Nat): async Nat { SafeUint.Uint96(a).bitnot().val() };
    public query func testSafeUint96Neg(a: Nat): async Nat { SafeUint.Uint96(a).neg().val() };
    public query func testSafeInt96Add(a: Int, b: Int): async Int { SafeInt.Int96(a).add(SafeInt.Int96(b)).val() };
    public query func testSafeInt96Sub(a: Int, b: Int): async Int { SafeInt.Int96(a).sub(SafeInt.Int96(b)).val() };
    public query func testSafeInt96Mul(a: Int, b: Int): async Int { SafeInt.Int96(a).mul(SafeInt.Int96(b)).val() };
    public query func testSafeInt96Div(a: Int, b: Int): async Int { SafeInt.Int96(a).div(SafeInt.Int96(b)).val() };
    public query func testSafeInt96Rem(a: Int, b: Int): async Int { SafeInt.Int96(a).rem(SafeInt.Int96(b)).val() };
    public query func testSafeInt96Pow(a: Int, b: Int): async Int { SafeInt.Int96(a).pow(b).val() };
    public query func testSafeInt96Left(a: Int, b: Nat): async Int { SafeInt.Int96(a).bitshiftLeft(b).val() };
    public query func testSafeInt96Right(a: Int, b: Nat): async Int { SafeInt.Int96(a).bitshiftRight(b).val() };
    public query func testSafeInt96And(a: Int, b: Int): async Int { SafeInt.Int96(a).bitand(SafeInt.Int96(b)).val() };
    public query func testSafeInt96Or(a: Int, b: Int): async Int { SafeInt.Int96(a).bitor(SafeInt.Int96(b)).val() };
    public query func testSafeInt96Xor(a: Int, b: Int): async Int { SafeInt.Int96(a).bitxor(SafeInt.Int96(b)).val() };
    public query func testSafeInt96Not(a: Int): async Int { SafeInt.Int96(a).bitnot().val() };
    public query func testSafeInt96Neg(a: Int): async Int { SafeInt.Int96(a).neg().val() };
    public query func testSafeUint112Add(a: Nat, b: Nat): async Nat { SafeUint.Uint112(a).add(SafeUint.Uint112(b)).val() };
    public query func testSafeUint112Sub(a: Nat, b: Nat): async Nat { SafeUint.Uint112(a).sub(SafeUint.Uint112(b)).val() };
    public query func testSafeUint112Mul(a: Nat, b: Nat): async Nat { SafeUint.Uint112(a).mul(SafeUint.Uint112(b)).val() };
    public query func testSafeUint112Div(a: Nat, b: Nat): async Nat { SafeUint.Uint112(a).div(SafeUint.Uint112(b)).val() };
    public query func testSafeUint112Rem(a: Nat, b: Nat): async Nat { SafeUint.Uint112(a).rem(SafeUint.Uint112(b)).val() };
    public query func testSafeUint112Pow(a: Nat, b: Nat): async Nat { SafeUint.Uint112(a).pow(b).val() };
    public query func testSafeUint112Left(a: Nat, b: Nat): async Nat { SafeUint.Uint112(a).bitshiftLeft(b).val() };
    public query func testSafeUint112Right(a: Nat, b: Nat): async Nat { SafeUint.Uint112(a).bitshiftRight(b).val() };
    public query func testSafeUint112And(a: Nat, b: Nat): async Nat { SafeUint.Uint112(a).bitand(SafeUint.Uint112(b)).val() };
    public query func testSafeUint112Or(a: Nat, b: Nat): async Nat { SafeUint.Uint112(a).bitor(SafeUint.Uint112(b)).val() };
    public query func testSafeUint112Xor(a: Nat, b: Nat): async Nat { SafeUint.Uint112(a).bitxor(SafeUint.Uint112(b)).val() };
    public query func testSafeUint112Not(a: Nat): async Nat { SafeUint.Uint112(a).bitnot().val() };
    public query func testSafeUint112Neg(a: Nat): async Nat { SafeUint.Uint112(a).neg().val() };
    public query func testSafeInt112Add(a: Int, b: Int): async Int { SafeInt.Int112(a).add(SafeInt.Int112(b)).val() };
    public query func testSafeInt112Sub(a: Int, b: Int): async Int { SafeInt.Int112(a).sub(SafeInt.Int112(b)).val() };
    public query func testSafeInt112Mul(a: Int, b: Int): async Int { SafeInt.Int112(a).mul(SafeInt.Int112(b)).val() };
    public query func testSafeInt112Div(a: Int, b: Int): async Int { SafeInt.Int112(a).div(SafeInt.Int112(b)).val() };
    public query func testSafeInt112Rem(a: Int, b: Int): async Int { SafeInt.Int112(a).rem(SafeInt.Int112(b)).val() };
    public query func testSafeInt112Pow(a: Int, b: Int): async Int { SafeInt.Int112(a).pow(b).val() };
    public query func testSafeInt112Left(a: Int, b: Nat): async Int { SafeInt.Int112(a).bitshiftLeft(b).val() };
    public query func testSafeInt112Right(a: Int, b: Nat): async Int { SafeInt.Int112(a).bitshiftRight(b).val() };
    public query func testSafeInt112And(a: Int, b: Int): async Int { SafeInt.Int112(a).bitand(SafeInt.Int112(b)).val() };
    public query func testSafeInt112Or(a: Int, b: Int): async Int { SafeInt.Int112(a).bitor(SafeInt.Int112(b)).val() };
    public query func testSafeInt112Xor(a: Int, b: Int): async Int { SafeInt.Int112(a).bitxor(SafeInt.Int112(b)).val() };
    public query func testSafeInt112Not(a: Int): async Int { SafeInt.Int112(a).bitnot().val() };
    public query func testSafeInt112Neg(a: Int): async Int { SafeInt.Int112(a).neg().val() };
    public query func testSafeUint128Add(a: Nat, b: Nat): async Nat { SafeUint.Uint128(a).add(SafeUint.Uint128(b)).val() };
    public query func testSafeUint128Sub(a: Nat, b: Nat): async Nat { SafeUint.Uint128(a).sub(SafeUint.Uint128(b)).val() };
    public query func testSafeUint128Mul(a: Nat, b: Nat): async Nat { SafeUint.Uint128(a).mul(SafeUint.Uint128(b)).val() };
    public query func testSafeUint128Div(a: Nat, b: Nat): async Nat { SafeUint.Uint128(a).div(SafeUint.Uint128(b)).val() };
    public query func testSafeUint128Rem(a: Nat, b: Nat): async Nat { SafeUint.Uint128(a).rem(SafeUint.Uint128(b)).val() };
    public query func testSafeUint128Pow(a: Nat, b: Nat): async Nat { SafeUint.Uint128(a).pow(b).val() };
    public query func testSafeUint128Left(a: Nat, b: Nat): async Nat { SafeUint.Uint128(a).bitshiftLeft(b).val() };
    public query func testSafeUint128Right(a: Nat, b: Nat): async Nat { SafeUint.Uint128(a).bitshiftRight(b).val() };
    public query func testSafeUint128And(a: Nat, b: Nat): async Nat { SafeUint.Uint128(a).bitand(SafeUint.Uint128(b)).val() };
    public query func testSafeUint128Or(a: Nat, b: Nat): async Nat { SafeUint.Uint128(a).bitor(SafeUint.Uint128(b)).val() };
    public query func testSafeUint128Xor(a: Nat, b: Nat): async Nat { SafeUint.Uint128(a).bitxor(SafeUint.Uint128(b)).val() };
    public query func testSafeUint128Not(a: Nat): async Nat { SafeUint.Uint128(a).bitnot().val() };
    public query func testSafeUint128Neg(a: Nat): async Nat { SafeUint.Uint128(a).neg().val() };
    public query func testSafeInt128Add(a: Int, b: Int): async Int { SafeInt.Int128(a).add(SafeInt.Int128(b)).val() };
    public query func testSafeInt128Sub(a: Int, b: Int): async Int { SafeInt.Int128(a).sub(SafeInt.Int128(b)).val() };
    public query func testSafeInt128Mul(a: Int, b: Int): async Int { SafeInt.Int128(a).mul(SafeInt.Int128(b)).val() };
    public query func testSafeInt128Div(a: Int, b: Int): async Int { SafeInt.Int128(a).div(SafeInt.Int128(b)).val() };
    public query func testSafeInt128Rem(a: Int, b: Int): async Int { SafeInt.Int128(a).rem(SafeInt.Int128(b)).val() };
    public query func testSafeInt128Pow(a: Int, b: Int): async Int { SafeInt.Int128(a).pow(b).val() };
    public query func testSafeInt128Left(a: Int, b: Nat): async Int { SafeInt.Int128(a).bitshiftLeft(b).val() };
    public query func testSafeInt128Right(a: Int, b: Nat): async Int { SafeInt.Int128(a).bitshiftRight(b).val() };
    public query func testSafeInt128And(a: Int, b: Int): async Int { SafeInt.Int128(a).bitand(SafeInt.Int128(b)).val() };
    public query func testSafeInt128Or(a: Int, b: Int): async Int { SafeInt.Int128(a).bitor(SafeInt.Int128(b)).val() };
    public query func testSafeInt128Xor(a: Int, b: Int): async Int { SafeInt.Int128(a).bitxor(SafeInt.Int128(b)).val() };
    public query func testSafeInt128Not(a: Int): async Int { SafeInt.Int128(a).bitnot().val() };
    public query func testSafeInt128Neg(a: Int): async Int { SafeInt.Int128(a).neg().val() };
    public query func testSafeUint144Add(a: Nat, b: Nat): async Nat { SafeUint.Uint144(a).add(SafeUint.Uint144(b)).val() };
    public query func testSafeUint144Sub(a: Nat, b: Nat): async Nat { SafeUint.Uint144(a).sub(SafeUint.Uint144(b)).val() };
    public query func testSafeUint144Mul(a: Nat, b: Nat): async Nat { SafeUint.Uint144(a).mul(SafeUint.Uint144(b)).val() };
    public query func testSafeUint144Div(a: Nat, b: Nat): async Nat { SafeUint.Uint144(a).div(SafeUint.Uint144(b)).val() };
    public query func testSafeUint144Rem(a: Nat, b: Nat): async Nat { SafeUint.Uint144(a).rem(SafeUint.Uint144(b)).val() };
    public query func testSafeUint144Pow(a: Nat, b: Nat): async Nat { SafeUint.Uint144(a).pow(b).val() };
    public query func testSafeUint144Left(a: Nat, b: Nat): async Nat { SafeUint.Uint144(a).bitshiftLeft(b).val() };
    public query func testSafeUint144Right(a: Nat, b: Nat): async Nat { SafeUint.Uint144(a).bitshiftRight(b).val() };
    public query func testSafeUint144And(a: Nat, b: Nat): async Nat { SafeUint.Uint144(a).bitand(SafeUint.Uint144(b)).val() };
    public query func testSafeUint144Or(a: Nat, b: Nat): async Nat { SafeUint.Uint144(a).bitor(SafeUint.Uint144(b)).val() };
    public query func testSafeUint144Xor(a: Nat, b: Nat): async Nat { SafeUint.Uint144(a).bitxor(SafeUint.Uint144(b)).val() };
    public query func testSafeUint144Not(a: Nat): async Nat { SafeUint.Uint144(a).bitnot().val() };
    public query func testSafeUint144Neg(a: Nat): async Nat { SafeUint.Uint144(a).neg().val() };
    public query func testSafeInt144Add(a: Int, b: Int): async Int { SafeInt.Int144(a).add(SafeInt.Int144(b)).val() };
    public query func testSafeInt144Sub(a: Int, b: Int): async Int { SafeInt.Int144(a).sub(SafeInt.Int144(b)).val() };
    public query func testSafeInt144Mul(a: Int, b: Int): async Int { SafeInt.Int144(a).mul(SafeInt.Int144(b)).val() };
    public query func testSafeInt144Div(a: Int, b: Int): async Int { SafeInt.Int144(a).div(SafeInt.Int144(b)).val() };
    public query func testSafeInt144Rem(a: Int, b: Int): async Int { SafeInt.Int144(a).rem(SafeInt.Int144(b)).val() };
    public query func testSafeInt144Pow(a: Int, b: Int): async Int { SafeInt.Int144(a).pow(b).val() };
    public query func testSafeInt144Left(a: Int, b: Nat): async Int { SafeInt.Int144(a).bitshiftLeft(b).val() };
    public query func testSafeInt144Right(a: Int, b: Nat): async Int { SafeInt.Int144(a).bitshiftRight(b).val() };
    public query func testSafeInt144And(a: Int, b: Int): async Int { SafeInt.Int144(a).bitand(SafeInt.Int144(b)).val() };
    public query func testSafeInt144Or(a: Int, b: Int): async Int { SafeInt.Int144(a).bitor(SafeInt.Int144(b)).val() };
    public query func testSafeInt144Xor(a: Int, b: Int): async Int { SafeInt.Int144(a).bitxor(SafeInt.Int144(b)).val() };
    public query func testSafeInt144Not(a: Int): async Int { SafeInt.Int144(a).bitnot().val() };
    public query func testSafeInt144Neg(a: Int): async Int { SafeInt.Int144(a).neg().val() };
    public query func testSafeUint160Add(a: Nat, b: Nat): async Nat { SafeUint.Uint160(a).add(SafeUint.Uint160(b)).val() };
    public query func testSafeUint160Sub(a: Nat, b: Nat): async Nat { SafeUint.Uint160(a).sub(SafeUint.Uint160(b)).val() };
    public query func testSafeUint160Mul(a: Nat, b: Nat): async Nat { SafeUint.Uint160(a).mul(SafeUint.Uint160(b)).val() };
    public query func testSafeUint160Div(a: Nat, b: Nat): async Nat { SafeUint.Uint160(a).div(SafeUint.Uint160(b)).val() };
    public query func testSafeUint160Rem(a: Nat, b: Nat): async Nat { SafeUint.Uint160(a).rem(SafeUint.Uint160(b)).val() };
    public query func testSafeUint160Pow(a: Nat, b: Nat): async Nat { SafeUint.Uint160(a).pow(b).val() };
    public query func testSafeUint160Left(a: Nat, b: Nat): async Nat { SafeUint.Uint160(a).bitshiftLeft(b).val() };
    public query func testSafeUint160Right(a: Nat, b: Nat): async Nat { SafeUint.Uint160(a).bitshiftRight(b).val() };
    public query func testSafeUint160And(a: Nat, b: Nat): async Nat { SafeUint.Uint160(a).bitand(SafeUint.Uint160(b)).val() };
    public query func testSafeUint160Or(a: Nat, b: Nat): async Nat { SafeUint.Uint160(a).bitor(SafeUint.Uint160(b)).val() };
    public query func testSafeUint160Xor(a: Nat, b: Nat): async Nat { SafeUint.Uint160(a).bitxor(SafeUint.Uint160(b)).val() };
    public query func testSafeUint160Not(a: Nat): async Nat { SafeUint.Uint160(a).bitnot().val() };
    public query func testSafeUint160Neg(a: Nat): async Nat { SafeUint.Uint160(a).neg().val() };
    public query func testSafeInt160Add(a: Int, b: Int): async Int { SafeInt.Int160(a).add(SafeInt.Int160(b)).val() };
    public query func testSafeInt160Sub(a: Int, b: Int): async Int { SafeInt.Int160(a).sub(SafeInt.Int160(b)).val() };
    public query func testSafeInt160Mul(a: Int, b: Int): async Int { SafeInt.Int160(a).mul(SafeInt.Int160(b)).val() };
    public query func testSafeInt160Div(a: Int, b: Int): async Int { SafeInt.Int160(a).div(SafeInt.Int160(b)).val() };
    public query func testSafeInt160Rem(a: Int, b: Int): async Int { SafeInt.Int160(a).rem(SafeInt.Int160(b)).val() };
    public query func testSafeInt160Pow(a: Int, b: Int): async Int { SafeInt.Int160(a).pow(b).val() };
    public query func testSafeInt160Left(a: Int, b: Nat): async Int { SafeInt.Int160(a).bitshiftLeft(b).val() };
    public query func testSafeInt160Right(a: Int, b: Nat): async Int { SafeInt.Int160(a).bitshiftRight(b).val() };
    public query func testSafeInt160And(a: Int, b: Int): async Int { SafeInt.Int160(a).bitand(SafeInt.Int160(b)).val() };
    public query func testSafeInt160Or(a: Int, b: Int): async Int { SafeInt.Int160(a).bitor(SafeInt.Int160(b)).val() };
    public query func testSafeInt160Xor(a: Int, b: Int): async Int { SafeInt.Int160(a).bitxor(SafeInt.Int160(b)).val() };
    public query func testSafeInt160Not(a: Int): async Int { SafeInt.Int160(a).bitnot().val() };
    public query func testSafeInt160Neg(a: Int): async Int { SafeInt.Int160(a).neg().val() };
    public query func testSafeUint176Add(a: Nat, b: Nat): async Nat { SafeUint.Uint176(a).add(SafeUint.Uint176(b)).val() };
    public query func testSafeUint176Sub(a: Nat, b: Nat): async Nat { SafeUint.Uint176(a).sub(SafeUint.Uint176(b)).val() };
    public query func testSafeUint176Mul(a: Nat, b: Nat): async Nat { SafeUint.Uint176(a).mul(SafeUint.Uint176(b)).val() };
    public query func testSafeUint176Div(a: Nat, b: Nat): async Nat { SafeUint.Uint176(a).div(SafeUint.Uint176(b)).val() };
    public query func testSafeUint176Rem(a: Nat, b: Nat): async Nat { SafeUint.Uint176(a).rem(SafeUint.Uint176(b)).val() };
    public query func testSafeUint176Pow(a: Nat, b: Nat): async Nat { SafeUint.Uint176(a).pow(b).val() };
    public query func testSafeUint176Left(a: Nat, b: Nat): async Nat { SafeUint.Uint176(a).bitshiftLeft(b).val() };
    public query func testSafeUint176Right(a: Nat, b: Nat): async Nat { SafeUint.Uint176(a).bitshiftRight(b).val() };
    public query func testSafeUint176And(a: Nat, b: Nat): async Nat { SafeUint.Uint176(a).bitand(SafeUint.Uint176(b)).val() };
    public query func testSafeUint176Or(a: Nat, b: Nat): async Nat { SafeUint.Uint176(a).bitor(SafeUint.Uint176(b)).val() };
    public query func testSafeUint176Xor(a: Nat, b: Nat): async Nat { SafeUint.Uint176(a).bitxor(SafeUint.Uint176(b)).val() };
    public query func testSafeUint176Not(a: Nat): async Nat { SafeUint.Uint176(a).bitnot().val() };
    public query func testSafeUint176Neg(a: Nat): async Nat { SafeUint.Uint176(a).neg().val() };
    public query func testSafeInt176Add(a: Int, b: Int): async Int { SafeInt.Int176(a).add(SafeInt.Int176(b)).val() };
    public query func testSafeInt176Sub(a: Int, b: Int): async Int { SafeInt.Int176(a).sub(SafeInt.Int176(b)).val() };
    public query func testSafeInt176Mul(a: Int, b: Int): async Int { SafeInt.Int176(a).mul(SafeInt.Int176(b)).val() };
    public query func testSafeInt176Div(a: Int, b: Int): async Int { SafeInt.Int176(a).div(SafeInt.Int176(b)).val() };
    public query func testSafeInt176Rem(a: Int, b: Int): async Int { SafeInt.Int176(a).rem(SafeInt.Int176(b)).val() };
    public query func testSafeInt176Pow(a: Int, b: Int): async Int { SafeInt.Int176(a).pow(b).val() };
    public query func testSafeInt176Left(a: Int, b: Nat): async Int { SafeInt.Int176(a).bitshiftLeft(b).val() };
    public query func testSafeInt176Right(a: Int, b: Nat): async Int { SafeInt.Int176(a).bitshiftRight(b).val() };
    public query func testSafeInt176And(a: Int, b: Int): async Int { SafeInt.Int176(a).bitand(SafeInt.Int176(b)).val() };
    public query func testSafeInt176Or(a: Int, b: Int): async Int { SafeInt.Int176(a).bitor(SafeInt.Int176(b)).val() };
    public query func testSafeInt176Xor(a: Int, b: Int): async Int { SafeInt.Int176(a).bitxor(SafeInt.Int176(b)).val() };
    public query func testSafeInt176Not(a: Int): async Int { SafeInt.Int176(a).bitnot().val() };
    public query func testSafeInt176Neg(a: Int): async Int { SafeInt.Int176(a).neg().val() };
    public query func testSafeUint192Add(a: Nat, b: Nat): async Nat { SafeUint.Uint192(a).add(SafeUint.Uint192(b)).val() };
    public query func testSafeUint192Sub(a: Nat, b: Nat): async Nat { SafeUint.Uint192(a).sub(SafeUint.Uint192(b)).val() };
    public query func testSafeUint192Mul(a: Nat, b: Nat): async Nat { SafeUint.Uint192(a).mul(SafeUint.Uint192(b)).val() };
    public query func testSafeUint192Div(a: Nat, b: Nat): async Nat { SafeUint.Uint192(a).div(SafeUint.Uint192(b)).val() };
    public query func testSafeUint192Rem(a: Nat, b: Nat): async Nat { SafeUint.Uint192(a).rem(SafeUint.Uint192(b)).val() };
    public query func testSafeUint192Pow(a: Nat, b: Nat): async Nat { SafeUint.Uint192(a).pow(b).val() };
    public query func testSafeUint192Left(a: Nat, b: Nat): async Nat { SafeUint.Uint192(a).bitshiftLeft(b).val() };
    public query func testSafeUint192Right(a: Nat, b: Nat): async Nat { SafeUint.Uint192(a).bitshiftRight(b).val() };
    public query func testSafeUint192And(a: Nat, b: Nat): async Nat { SafeUint.Uint192(a).bitand(SafeUint.Uint192(b)).val() };
    public query func testSafeUint192Or(a: Nat, b: Nat): async Nat { SafeUint.Uint192(a).bitor(SafeUint.Uint192(b)).val() };
    public query func testSafeUint192Xor(a: Nat, b: Nat): async Nat { SafeUint.Uint192(a).bitxor(SafeUint.Uint192(b)).val() };
    public query func testSafeUint192Not(a: Nat): async Nat { SafeUint.Uint192(a).bitnot().val() };
    public query func testSafeUint192Neg(a: Nat): async Nat { SafeUint.Uint192(a).neg().val() };
    public query func testSafeInt192Add(a: Int, b: Int): async Int { SafeInt.Int192(a).add(SafeInt.Int192(b)).val() };
    public query func testSafeInt192Sub(a: Int, b: Int): async Int { SafeInt.Int192(a).sub(SafeInt.Int192(b)).val() };
    public query func testSafeInt192Mul(a: Int, b: Int): async Int { SafeInt.Int192(a).mul(SafeInt.Int192(b)).val() };
    public query func testSafeInt192Div(a: Int, b: Int): async Int { SafeInt.Int192(a).div(SafeInt.Int192(b)).val() };
    public query func testSafeInt192Rem(a: Int, b: Int): async Int { SafeInt.Int192(a).rem(SafeInt.Int192(b)).val() };
    public query func testSafeInt192Pow(a: Int, b: Int): async Int { SafeInt.Int192(a).pow(b).val() };
    public query func testSafeInt192Left(a: Int, b: Nat): async Int { SafeInt.Int192(a).bitshiftLeft(b).val() };
    public query func testSafeInt192Right(a: Int, b: Nat): async Int { SafeInt.Int192(a).bitshiftRight(b).val() };
    public query func testSafeInt192And(a: Int, b: Int): async Int { SafeInt.Int192(a).bitand(SafeInt.Int192(b)).val() };
    public query func testSafeInt192Or(a: Int, b: Int): async Int { SafeInt.Int192(a).bitor(SafeInt.Int192(b)).val() };
    public query func testSafeInt192Xor(a: Int, b: Int): async Int { SafeInt.Int192(a).bitxor(SafeInt.Int192(b)).val() };
    public query func testSafeInt192Not(a: Int): async Int { SafeInt.Int192(a).bitnot().val() };
    public query func testSafeInt192Neg(a: Int): async Int { SafeInt.Int192(a).neg().val() };
    public query func testSafeUint224Add(a: Nat, b: Nat): async Nat { SafeUint.Uint224(a).add(SafeUint.Uint224(b)).val() };
    public query func testSafeUint224Sub(a: Nat, b: Nat): async Nat { SafeUint.Uint224(a).sub(SafeUint.Uint224(b)).val() };
    public query func testSafeUint224Mul(a: Nat, b: Nat): async Nat { SafeUint.Uint224(a).mul(SafeUint.Uint224(b)).val() };
    public query func testSafeUint224Div(a: Nat, b: Nat): async Nat { SafeUint.Uint224(a).div(SafeUint.Uint224(b)).val() };
    public query func testSafeUint224Rem(a: Nat, b: Nat): async Nat { SafeUint.Uint224(a).rem(SafeUint.Uint224(b)).val() };
    public query func testSafeUint224Pow(a: Nat, b: Nat): async Nat { SafeUint.Uint224(a).pow(b).val() };
    public query func testSafeUint224Left(a: Nat, b: Nat): async Nat { SafeUint.Uint224(a).bitshiftLeft(b).val() };
    public query func testSafeUint224Right(a: Nat, b: Nat): async Nat { SafeUint.Uint224(a).bitshiftRight(b).val() };
    public query func testSafeUint224And(a: Nat, b: Nat): async Nat { SafeUint.Uint224(a).bitand(SafeUint.Uint224(b)).val() };
    public query func testSafeUint224Or(a: Nat, b: Nat): async Nat { SafeUint.Uint224(a).bitor(SafeUint.Uint224(b)).val() };
    public query func testSafeUint224Xor(a: Nat, b: Nat): async Nat { SafeUint.Uint224(a).bitxor(SafeUint.Uint224(b)).val() };
    public query func testSafeUint224Not(a: Nat): async Nat { SafeUint.Uint224(a).bitnot().val() };
    public query func testSafeUint224Neg(a: Nat): async Nat { SafeUint.Uint224(a).neg().val() };
    public query func testSafeInt224Add(a: Int, b: Int): async Int { SafeInt.Int224(a).add(SafeInt.Int224(b)).val() };
    public query func testSafeInt224Sub(a: Int, b: Int): async Int { SafeInt.Int224(a).sub(SafeInt.Int224(b)).val() };
    public query func testSafeInt224Mul(a: Int, b: Int): async Int { SafeInt.Int224(a).mul(SafeInt.Int224(b)).val() };
    public query func testSafeInt224Div(a: Int, b: Int): async Int { SafeInt.Int224(a).div(SafeInt.Int224(b)).val() };
    public query func testSafeInt224Rem(a: Int, b: Int): async Int { SafeInt.Int224(a).rem(SafeInt.Int224(b)).val() };
    public query func testSafeInt224Pow(a: Int, b: Int): async Int { SafeInt.Int224(a).pow(b).val() };
    public query func testSafeInt224Left(a: Int, b: Nat): async Int { SafeInt.Int224(a).bitshiftLeft(b).val() };
    public query func testSafeInt224Right(a: Int, b: Nat): async Int { SafeInt.Int224(a).bitshiftRight(b).val() };
    public query func testSafeInt224And(a: Int, b: Int): async Int { SafeInt.Int224(a).bitand(SafeInt.Int224(b)).val() };
    public query func testSafeInt224Or(a: Int, b: Int): async Int { SafeInt.Int224(a).bitor(SafeInt.Int224(b)).val() };
    public query func testSafeInt224Xor(a: Int, b: Int): async Int { SafeInt.Int224(a).bitxor(SafeInt.Int224(b)).val() };
    public query func testSafeInt224Not(a: Int): async Int { SafeInt.Int224(a).bitnot().val() };
    public query func testSafeInt224Neg(a: Int): async Int { SafeInt.Int224(a).neg().val() };
    public query func testSafeUint256Add(a: Nat, b: Nat): async Nat { SafeUint.Uint256(a).add(SafeUint.Uint256(b)).val() };
    public query func testSafeUint256Sub(a: Nat, b: Nat): async Nat { SafeUint.Uint256(a).sub(SafeUint.Uint256(b)).val() };
    public query func testSafeUint256Mul(a: Nat, b: Nat): async Nat { SafeUint.Uint256(a).mul(SafeUint.Uint256(b)).val() };
    public query func testSafeUint256Div(a: Nat, b: Nat): async Nat { SafeUint.Uint256(a).div(SafeUint.Uint256(b)).val() };
    public query func testSafeUint256Rem(a: Nat, b: Nat): async Nat { SafeUint.Uint256(a).rem(SafeUint.Uint256(b)).val() };
    public query func testSafeUint256Pow(a: Nat, b: Nat): async Nat { SafeUint.Uint256(a).pow(b).val() };
    public query func testSafeUint256Left(a: Nat, b: Nat): async Nat { SafeUint.Uint256(a).bitshiftLeft(b).val() };
    public query func testSafeUint256Right(a: Nat, b: Nat): async Nat { SafeUint.Uint256(a).bitshiftRight(b).val() };
    public query func testSafeUint256And(a: Nat, b: Nat): async Nat { SafeUint.Uint256(a).bitand(SafeUint.Uint256(b)).val() };
    public query func testSafeUint256Or(a: Nat, b: Nat): async Nat { SafeUint.Uint256(a).bitor(SafeUint.Uint256(b)).val() };
    public query func testSafeUint256Xor(a: Nat, b: Nat): async Nat { SafeUint.Uint256(a).bitxor(SafeUint.Uint256(b)).val() };
    public query func testSafeUint256Not(a: Nat): async Nat { SafeUint.Uint256(a).bitnot().val() };
    public query func testSafeUint256Neg(a: Nat): async Nat { SafeUint.Uint256(a).neg().val() };
    public query func testSafeInt256Add(a: Int, b: Int): async Int { SafeInt.Int256(a).add(SafeInt.Int256(b)).val() };
    public query func testSafeInt256Sub(a: Int, b: Int): async Int { SafeInt.Int256(a).sub(SafeInt.Int256(b)).val() };
    public query func testSafeInt256Mul(a: Int, b: Int): async Int { SafeInt.Int256(a).mul(SafeInt.Int256(b)).val() };
    public query func testSafeInt256Div(a: Int, b: Int): async Int { SafeInt.Int256(a).div(SafeInt.Int256(b)).val() };
    public query func testSafeInt256Rem(a: Int, b: Int): async Int { SafeInt.Int256(a).rem(SafeInt.Int256(b)).val() };
    public query func testSafeInt256Pow(a: Int, b: Int): async Int { SafeInt.Int256(a).pow(b).val() };
    public query func testSafeInt256Left(a: Int, b: Nat): async Int { SafeInt.Int256(a).bitshiftLeft(b).val() };
    public query func testSafeInt256Right(a: Int, b: Nat): async Int { SafeInt.Int256(a).bitshiftRight(b).val() };
    public query func testSafeInt256And(a: Int, b: Int): async Int { SafeInt.Int256(a).bitand(SafeInt.Int256(b)).val() };
    public query func testSafeInt256Or(a: Int, b: Int): async Int { SafeInt.Int256(a).bitor(SafeInt.Int256(b)).val() };
    public query func testSafeInt256Xor(a: Int, b: Int): async Int { SafeInt.Int256(a).bitxor(SafeInt.Int256(b)).val() };
    public query func testSafeInt256Not(a: Int): async Int { SafeInt.Int256(a).bitnot().val() };
    public query func testSafeInt256Neg(a: Int): async Int { SafeInt.Int256(a).neg().val() };
    public query func testSafeUint512Add(a: Nat, b: Nat): async Nat { SafeUint.Uint512(a).add(SafeUint.Uint512(b)).val() };
    public query func testSafeUint512Sub(a: Nat, b: Nat): async Nat { SafeUint.Uint512(a).sub(SafeUint.Uint512(b)).val() };
    public query func testSafeUint512Mul(a: Nat, b: Nat): async Nat { SafeUint.Uint512(a).mul(SafeUint.Uint512(b)).val() };
    public query func testSafeUint512Div(a: Nat, b: Nat): async Nat { SafeUint.Uint512(a).div(SafeUint.Uint512(b)).val() };
    public query func testSafeUint512Rem(a: Nat, b: Nat): async Nat { SafeUint.Uint512(a).rem(SafeUint.Uint512(b)).val() };
    public query func testSafeUint512Pow(a: Nat, b: Nat): async Nat { SafeUint.Uint512(a).pow(b).val() };
    public query func testSafeUint512Left(a: Nat, b: Nat): async Nat { SafeUint.Uint512(a).bitshiftLeft(b).val() };
    public query func testSafeUint512Right(a: Nat, b: Nat): async Nat { SafeUint.Uint512(a).bitshiftRight(b).val() };
    public query func testSafeUint512And(a: Nat, b: Nat): async Nat { SafeUint.Uint512(a).bitand(SafeUint.Uint512(b)).val() };
    public query func testSafeUint512Or(a: Nat, b: Nat): async Nat { SafeUint.Uint512(a).bitor(SafeUint.Uint512(b)).val() };
    public query func testSafeUint512Xor(a: Nat, b: Nat): async Nat { SafeUint.Uint512(a).bitxor(SafeUint.Uint512(b)).val() };
    public query func testSafeUint512Not(a: Nat): async Nat { SafeUint.Uint512(a).bitnot().val() };
    public query func testSafeUint512Neg(a: Nat): async Nat { SafeUint.Uint512(a).neg().val() };
    public query func testSafeInt512Add(a: Int, b: Int): async Int { SafeInt.Int512(a).add(SafeInt.Int512(b)).val() };
    public query func testSafeInt512Sub(a: Int, b: Int): async Int { SafeInt.Int512(a).sub(SafeInt.Int512(b)).val() };
    public query func testSafeInt512Mul(a: Int, b: Int): async Int { SafeInt.Int512(a).mul(SafeInt.Int512(b)).val() };
    public query func testSafeInt512Div(a: Int, b: Int): async Int { SafeInt.Int512(a).div(SafeInt.Int512(b)).val() };
    public query func testSafeInt512Rem(a: Int, b: Int): async Int { SafeInt.Int512(a).rem(SafeInt.Int512(b)).val() };
    public query func testSafeInt512Pow(a: Int, b: Int): async Int { SafeInt.Int512(a).pow(b).val() };
    public query func testSafeInt512Left(a: Int, b: Nat): async Int { SafeInt.Int512(a).bitshiftLeft(b).val() };
    public query func testSafeInt512Right(a: Int, b: Nat): async Int { SafeInt.Int512(a).bitshiftRight(b).val() };
    public query func testSafeInt512And(a: Int, b: Int): async Int { SafeInt.Int512(a).bitand(SafeInt.Int512(b)).val() };
    public query func testSafeInt512Or(a: Int, b: Int): async Int { SafeInt.Int512(a).bitor(SafeInt.Int512(b)).val() };
    public query func testSafeInt512Xor(a: Int, b: Int): async Int { SafeInt.Int512(a).bitxor(SafeInt.Int512(b)).val() };
    public query func testSafeInt512Not(a: Int): async Int { SafeInt.Int512(a).bitnot().val() };
    public query func testSafeInt512Neg(a: Int): async Int { SafeInt.Int512(a).neg().val() };
}